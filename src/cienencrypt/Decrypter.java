/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cienencrypt;

import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.io.File;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.PrivateKey;
import java.util.List;
import java.util.UUID;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Cien
 */
public class Decrypter extends javax.swing.JFrame {

    private final MainWindow main;
    private Util.ZipStatus currentZipStatus = null;
    private Util.CipherStatus currentCipherStatus = null;

    public Decrypter(MainWindow main) {
        initComponents();
        this.main = main;
        privateKeyField.setDropTarget(new DropTarget() {
            @Override
            public synchronized void drop(DropTargetDropEvent dtde) {
                onPrivateKeyDrop(dtde);
            }
        });
        fileField.setDropTarget(new DropTarget() {
            @Override
            public synchronized void drop(DropTargetDropEvent dtde) {
                onFileFieldDrop(dtde);
            }
        });
    }

    public MainWindow getMain() {
        return main;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        privateKeyField = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        fileField = new javax.swing.JTextField();
        chooseFileButton = new javax.swing.JButton();
        decryptButton = new javax.swing.JButton();
        logLabel = new javax.swing.JLabel();

        setTitle("Decriptador");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });

        jLabel1.setText("Chave Privada (Arraste ou Cole):");

        privateKeyField.setColumns(20);
        privateKeyField.setLineWrap(true);
        privateKeyField.setRows(5);
        privateKeyField.setMinimumSize(new java.awt.Dimension(113, 20));
        jScrollPane1.setViewportView(privateKeyField);

        jLabel2.setText("Arquivo para Decriptar (Arraste, Cole ou Escolha):");

        chooseFileButton.setText("...");
        chooseFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileButtonActionPerformed(evt);
            }
        });

        decryptButton.setText("Decriptar");
        decryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptButtonActionPerformed(evt);
            }
        });

        logLabel.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 248, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(decryptButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decryptButton)
                    .addComponent(logLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void disableFields() {
        fileField.setEditable(false);
        privateKeyField.setEditable(false);
        chooseFileButton.setEnabled(false);
        decryptButton.setEnabled(false);
    }

    private void enableFields() {
        fileField.setEditable(true);
        privateKeyField.setEditable(true);
        chooseFileButton.setEnabled(true);
        decryptButton.setEnabled(true);
    }

    private void onPrivateKeyDrop(DropTargetDropEvent event) {
        event.acceptDrop(DnDConstants.ACTION_COPY);
        try {
            List<File> files = (List<File>) event.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
            if (files.size() != 1) {
                Toolkit.getDefaultToolkit().beep();
                return;
            }

            File f = files.get(0);
            if (!f.isFile()) {
                Toolkit.getDefaultToolkit().beep();
                return;
            }

            if (f.length() > 5000) {
                Toolkit.getDefaultToolkit().beep();
                return;
            }

            String key = Util.readFile(f);

            if (key == null) {
                Toolkit.getDefaultToolkit().beep();
                return;
            }

            privateKeyField.setText(key);
        } catch (UnsupportedFlavorException | IOException ex) {
            ex.printStackTrace();
            Toolkit.getDefaultToolkit().beep();
        }
    }

    private void onFileFieldDrop(DropTargetDropEvent event) {
        try {
            event.acceptDrop(DnDConstants.ACTION_COPY);

            List<File> files = (List<File>) event.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
            if (files.size() != 1) {
                Toolkit.getDefaultToolkit().beep();
                return;
            }

            File f = files.get(0);
            if (!f.isFile()) {
                Toolkit.getDefaultToolkit().beep();
                return;
            }
            if (!f.getName().endsWith(".ezip")) {
                Toolkit.getDefaultToolkit().beep();
                return;
            }

            fileField.setText(f.getAbsolutePath());
        } catch (UnsupportedFlavorException | IOException ex) {
            ex.printStackTrace();
            Toolkit.getDefaultToolkit().beep();
        }
    }

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        if (currentZipStatus != null) {
            currentZipStatus.setCancelled(true);
            currentZipStatus = null;
        }

        if (currentCipherStatus != null) {
            currentCipherStatus.setCancelled(true);
            currentCipherStatus = null;
        }

        privateKeyField.setText("");
        fileField.setText("");
        logLabel.setText("");

        enableFields();

        main.setLocationRelativeTo(null);
        main.setVisible(true);
    }//GEN-LAST:event_formComponentHidden

    private void chooseFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new FileNameExtensionFilter("Encrypted ZIP (.ezip)", "ezip"));
        fileChooser.addActionListener((e) -> {
            File f = fileChooser.getSelectedFile();

            if (f == null) {
                return;
            }

            if (!f.isFile()) {
                Toolkit.getDefaultToolkit().beep();
                return;
            }

            fileField.setText(f.getAbsolutePath());
        });
        fileChooser.showOpenDialog(this);
    }//GEN-LAST:event_chooseFileButtonActionPerformed

    private void decryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptButtonActionPerformed
        String privateKey = privateKeyField.getText();

        try {

            byte[] keyBytes = Util.fromBase64(privateKey);
            PrivateKey priv = Util.toPrivateKey(keyBytes);

            File file = new File(fileField.getText());

            if (!file.isFile()) {
                Toolkit.getDefaultToolkit().beep();
                logLabel.setText("Arquivo inválido ou ausente.");
                return;
            }

            if (!file.getName().endsWith(".ezip")) {
                Toolkit.getDefaultToolkit().beep();
                logLabel.setText("Tipo de Arquivo Inválido.");
                return;
            }

            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            fileChooser.addActionListener((e) -> {
                File[] outFolder = {fileChooser.getSelectedFile()};

                if (outFolder[0] == null || e.getActionCommand().equals("CancelSelection")) {
                    return;
                }

                new Thread(() -> {
                    try {
                        disableFields();

                        outFolder[0] = new File(outFolder[0], file.getName().substring(0, file.getName().length()-".ezip".length()));
                        
                        if (outFolder[0].exists()) {
                            int count = 0;
                            String path = outFolder[0].getAbsolutePath();
                            while ((outFolder[0] = new File(path+" ("+count+")")).exists()) {
                                count++;
                            }
                        }

                        File zipOut = File.createTempFile(UUID.randomUUID().toString(), ".zip");
                        zipOut.deleteOnExit();
                        System.out.println(zipOut.getName());

                        Util.CipherStatus status = new Util.CipherStatus() {
                            @Override
                            public void onStatusChanged() {
                                logLabel.setText("Descriptografando - " + getPercent() + "%");
                            }
                        };

                        currentCipherStatus = status;

                        Util.decryptFile(file, zipOut, priv, status);

                        Util.ZipStatus zipStatus = new Util.ZipStatus() {
                            @Override
                            public void onStatusChanged() {
                                logLabel.setText(getStatus());
                            }
                        };

                        currentZipStatus = zipStatus;

                        Util.zipToFolder(zipOut, outFolder[0], zipStatus);

                        logLabel.setText("Completo");
                    } catch (GeneralSecurityException | IOException ex) {
                        Toolkit.getDefaultToolkit().beep();
                        logLabel.setText("Erro: " + ex.getMessage());
                    } finally {
                        enableFields();
                    }

                }).start();

            });
            fileChooser.showSaveDialog(this);

        } catch (GeneralSecurityException | IllegalArgumentException ex) {
            ex.printStackTrace();
            Toolkit.getDefaultToolkit().beep();
            logLabel.setText("Chave privada inválida ou ausente.");
        }

    }//GEN-LAST:event_decryptButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseFileButton;
    private javax.swing.JButton decryptButton;
    private javax.swing.JTextField fileField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel logLabel;
    private javax.swing.JTextArea privateKeyField;
    // End of variables declaration//GEN-END:variables
}
